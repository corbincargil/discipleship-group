generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                      String             @id @default(uuid())
  name                    String
  email                   String             @unique
  createdMeetings         Meetings[]         @relation("MeetingCreator")
  attendedMeetings        UserMeetings[]
  createdUsers            Users[]            @relation("UserCreator")
  createdBy               Users?             @relation("UserCreator", fields: [createdById], references: [id])
  createdById             String?
  createdGroups           Groups[]
  groups                  UserGroups[]
  accountabilities        Accountabilities[] @relation("AccountabilityUser")
  celebrations            Celebrations[]     @relation("CelebrationUser")
  createdAccountabilities Accountabilities[] @relation("AccountabilityCreator")
  createdCelebrations     Celebrations[]     @relation("CelebrationCreator")
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
}

model Meetings {
  id          String         @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  attendees   UserMeetings[]
  group       Groups         @relation(fields: [groupId], references: [id])
  groupId     String
  createdBy   Users          @relation("MeetingCreator", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model UserMeetings {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  meeting   Meetings @relation(fields: [meetingId], references: [id])
  meetingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, meetingId])
}

model Groups {
  id          String       @id @default(uuid())
  name        String
  description String
  members     UserGroups[]
  meetings    Meetings[]
  createdBy   Users        @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UserGroups {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  group     Groups   @relation(fields: [groupId], references: [id])
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accountabilities {
  id          String   @id @default(uuid())
  name        String
  description String
  user        Users    @relation("AccountabilityUser", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdBy   Users    @relation("AccountabilityCreator", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Celebrations {
  id          String   @id @default(uuid())
  name        String
  description String
  user        Users    @relation("CelebrationUser", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdBy   Users    @relation("CelebrationCreator", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
